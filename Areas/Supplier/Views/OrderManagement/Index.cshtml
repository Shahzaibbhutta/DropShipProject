@using DropShipProject.Models
@model List<Order>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Order Management";
}

<div class="container main-content">
    <h2 class="mb-4 text-2xl font-bold" style="color: #2563eb;">Order Management</h2>

    <div class="card shadow-sm border-0 rounded-lg">
        <div class="card-body p-4">
            <!-- Filter and Search Section -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <label class="fw-bold mb-2">Filter by Status:</label>
                    <div class="d-flex flex-wrap gap-3">
                        @foreach (var status in new[] { "Pending", "Processing", "Shipped", "Delivered", "Return", "Cancelled" })
                        {
                            <div class="form-check form-switch">
                                <input class="form-check-input status-filter" type="checkbox" value="@status" id="filter_@status" role="checkbox" aria-label="Filter by @status">
                                <label class="form-check-label" for="filter_@status">@status</label>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <label for="searchInput" class="fw-bold mb-2">Search Orders:</label>
                    <input type="text" id="searchInput" class="form-control" placeholder="Search by order # or dropshipper..." aria-label="Search orders">
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover border rounded">
                    <thead style="background: #2563eb; color: #fff;">
                        <tr>
                            <th>Order #</th>
                            <th>DropShipper</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTableBody">
                        @if (Model != null && Model.Any())
                        {
                            foreach (var order in Model)
                            {
                                @Html.Partial("_OrderRow", order)
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center text-muted">No orders found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-4">
                <div>
                    <label for="rowsPerPage" class="me-2">Rows per page:</label>
                    <select id="rowsPerPage" class="form-select d-inline-block w-auto">
                        <option value="5">5</option>
                        <option value="10" selected>10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                    </select>
                </div>
                <nav aria-label="Order pagination">
                    <ul class="pagination mb-0">
                        <li class="page-item" id="prevPage"><a class="page-link" href="#">Previous</a></li>
                        <li class="page-item" id="nextPage"><a class="page-link" href="#">Next</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Hidden Anti-Forgery Form -->
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<!-- Process Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" style="background: #2563eb; color: #fff;">
                <h5 class="modal-title" id="returnModalLabel">Process Return</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Process return for order <strong id="modalOrderNumber"></strong>?</p>
                <div class="mb-3">
                    <label for="returnReason" class="form-label">Return Processing Notes</label>
                    <textarea class="form-control" id="returnReason" rows="4" placeholder="Provide details for processing the return..." aria-label="Return processing notes"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" style="background: #e5e7eb; color: #1f2937;" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn text-white" id="confirmReturn" style="background: #facc15; color: #1f2937;">Process Return</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let orders = @Html.Raw(Json.Serialize(Model.Select(o => new
            {
                id = o.Id,
                orderNumber = o.OrderNumber,
                dropShipperCompanyName = o.DropShipper?.CompanyName ?? "",
                orderDate = o.OrderDate.ToString("o"),
                totalAmount = o.TotalAmount,
                status = o.Status
            })));
            let currentPage = 1;
            let rowsPerPage = 10;
            let searchQuery = '';

            // Filter by Status
            $(".status-filter").change(function () {
                currentPage = 1;
                loadFilteredOrders();
            });

            // Search
            $("#searchInput").on("input", function () {
                searchQuery = $(this).val().toLowerCase();
                currentPage = 1;
                loadFilteredOrders();
            });

            // Pagination
            $("#rowsPerPage").change(function () {
                rowsPerPage = parseInt(this.value);
                currentPage = 1;
                renderTable();
            });

            $("#prevPage").click(function (e) {
                e.preventDefault();
                if (currentPage > 1) {
                    currentPage--;
                    renderTable();
                }
            });

            $("#nextPage").click(function (e) {
                e.preventDefault();
                const totalPages = Math.ceil(orders.length / rowsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTable();
                }
            });

            // Event delegation for status update links
            $(document).on('click', '#ordersTableBody .dropdown-item:not(.disabled)', function (e) {
                e.preventDefault();
                const orderId = $(this).closest('tr').find('.process-return').data('order-id') || $(this).closest('.btn-group').find('a[href*="/Details/"]').attr('href').split('/').pop();
                const status = $(this).text().trim();
                updateStatus(orderId, status);
            });

            function loadFilteredOrders() {
                const selectedStatuses = $(".status-filter:checked").map(function () {
                    return $(this).val();
                }).get();
                $.ajax({
                    url: '@Url.Action("GetFilteredOrders", "OrderManagement", new { area = "Supplier" })',
                    type: 'GET',
                    traditional: true,
                    data: { statuses: selectedStatuses },
                    success: function (data) {
                        orders = data;
                        currentPage = 1;
                        renderTable();
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to load filtered orders:', status, error, xhr.responseText);
                        alert('Failed to load filtered orders.');
                    }
                });
            }

            function renderTable() {
                const filteredOrders = orders.filter(o =>
                    o.orderNumber.toLowerCase().includes(searchQuery) ||
                    o.dropShipperCompanyName.toLowerCase().includes(searchQuery)
                );
                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                const paginatedOrders = filteredOrders.slice(start, end);

                let html = '';
                if (paginatedOrders.length === 0) {
                    html = '<tr><td colspan="6" class="text-center text-muted">No orders found.</td></tr>';
                } else {
                    paginatedOrders.forEach(o => {
                        const returnButton = o.status === 'Return'
                            ? `<button class="btn btn-sm text-white ms-2 process-return" data-order-id="${o.id}" data-order-number="${o.orderNumber}" style="background: #facc15; color: #1f2937;"><i class="fas fa-undo"></i> Process Return</button>`
                            : '';
                        html += `
                                    <tr>
                                        <td>${o.orderNumber}</td>
                                        <td>${o.dropShipperCompanyName}</td>
                                        <td>${new Date(o.orderDate).toLocaleDateString()}</td>
                                        <td>${o.totalAmount}</td>
                                        <td><span class="badge ${getStatusBadgeClass(o.status)}">${o.status}</span></td>
                                        <td class="text-center">
                                            <div class="btn-group dropend">
                                                <a href="/Supplier/OrderManagement/Details/${o.id}" class="btn btn-sm text-white" style="background: #2563eb;">
                                                    <i class="fas fa-eye"></i> View
                                                </a>
                                                <button type="button" class="btn btn-sm text-white dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" style="background: #2563eb;">
                                                    <span class="visually-hidden">Toggle Dropdown</span>
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item ${o.status === 'Pending' ? 'disabled' : ''}" href="#">Pending</a></li>
                                                    <li><a class="dropdown-item ${o.status === 'Processing' ? 'disabled' : ''}" href="#">Processing</a></li>
                                                    <li><a class="dropdown-item ${o.status === 'Shipped' ? 'disabled' : ''}" href="#">Shipped</a></li>
                                                    <li><a class="dropdown-item ${o.status === 'Delivered' ? 'disabled' : ''}" href="#">Delivered</a></li>
                                                    <li><a class="dropdown-item ${o.status === 'Return' ? 'disabled' : ''}" href="#">Return</a></li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><a class="dropdown-item text-danger ${o.status === 'Cancelled' ? 'disabled' : ''}" href="#">Cancelled</a></li>
                                                </ul>
                                            </div>
                                            ${returnButton}
                                        </td>
                                    </tr>`;
                    });
                }
                $('#ordersTableBody').empty().html(html); // Clear table body before injecting new HTML

                // Update pagination
                const totalPages = Math.ceil(filteredOrders.length / rowsPerPage);
                $('#prevPage').toggleClass('disabled', currentPage === 1);
                $('#nextPage').toggleClass('disabled', currentPage >= totalPages);

                // Rebind return button events
                bindReturnButtons();
            }

            function getStatusBadgeClass(status) {
                switch (status) {
                    case 'Pending': return 'bg-warning text-dark';
                    case 'Processing': return 'bg-info text-white';
                    case 'Shipped': return 'bg-success text-white';
                    case 'Delivered': return 'bg-primary text-white';
                    case 'Return': return 'bg-secondary text-white';
                    case 'Cancelled': return 'bg-danger text-white';
                    default: return 'bg-secondary text-white';
                }
            }

            function updateStatus(orderId, status) {
                const token = $('#antiForgeryForm input[name="__RequestVerificationToken"]').val();
                if (!token) {
                    console.error('Antiforgery token not found.');
                    alert('Security token missing. Please refresh the page.');
                    return;
                }
                console.log(`Updating status for order ${orderId} to ${status}`);
                $.ajax({
                    url: '@Url.Action("UpdateStatus", "OrderManagement", new { area = "Supplier" })',
                    type: 'POST',
                    data: { orderId: orderId, status: status },
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function (response) {
                        if (response.success) {
                            console.log(`Status updated successfully for order ${orderId} to ${status}`);
                            loadFilteredOrders(); // Refresh table
                        } else {
                            console.error('Failed to update status:', response.message);
                            alert('Failed to update status: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('UpdateStatus AJAX error:', status, error, xhr.responseText);
                        alert('Failed to update status: ' + (xhr.responseJSON?.message || error));
                    }
                });
            }

            // Process Return
            function bindReturnButtons() {
                $('.process-return').off('click').on('click', function () {
                    const orderId = $(this).data('order-id');
                    const orderNumber = $(this).data('order-number');
                    $('#modalOrderNumber').text(orderNumber);
                    $('#confirmReturn').data('order-id', orderId);
                    $('#returnModal').modal('show');
                });
            }

            $('#confirmReturn').click(function () {
                const orderId = $(this).data('order-id');
                const reason = $('#returnReason').val().trim();
                if (!reason) {
                    alert('Please provide a reason for processing the return.');
                    return;
                }

                const token = $('#antiForgeryForm input[name="__RequestVerificationToken"]').val();
                if (!token) {
                    console.error('Antiforgery token not found.');
                    alert('Security token missing. Please refresh the page.');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("ProcessReturn", "OrderManagement", new { area = "Supplier" })',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ orderId: orderId, reason: reason }),
                    headers: {
                        'RequestVerificationToken': token
                    },
                    success: function (response) {
                        if (response.success) {
                            alert('Return processed successfully.');
                            $('#returnModal').modal('hide');
                            $('#returnReason').val('');
                            loadFilteredOrders();
                        } else {
                            alert('Failed to process return: ' + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('ProcessReturn AJAX error:', status, error, xhr.responseText);
                        alert('Failed to process return: ' + (xhr.responseJSON?.message || error));
                    }
                });
            });

            // Initial table render
            renderTable();
        });
    </script>
}