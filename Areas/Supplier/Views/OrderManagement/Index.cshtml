@using DropShipProject.Models
@model List<Order>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Order Management";
}

<div class="container my-4">
    <h2 class="mb-4 text-primary">Order Management</h2>

    <!-- Filter Section -->
    <div class="mb-3">
        <label class="fw-bold me-3">Filter by Status:</label>
        @foreach (var status in new[] { "Pending", "Processing", "Shipped", "Delivered", "Return", "Cancelled" })
        {
            <div class="form-check form-check-inline">
                <input class="form-check-input status-filter" type="checkbox" value="@status" id="filter_@status">
                <label class="form-check-label" for="filter_@status">@status</label>
            </div>
        }
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover shadow-sm align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Order #</th>
                    <th>DropShipper</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th class="text-center" style="min-width: 180px;">Actions</th>
                </tr>
            </thead>
            <tbody id="ordersTableBody">
                @if (Model != null && Model.Any())
                {
                    foreach (var order in Model)
                    {
                        @Html.Partial("_OrderRow", order)
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center text-muted">No orders found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Hidden Anti-Forgery Form -->
<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script>
        function updateStatus(orderId, status) {
            var token = $('#antiForgeryForm input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '@Url.Action("UpdateStatus", "OrderManagement", new { area = "Supplier" })',
                type: 'POST',
                data: { orderId: orderId, status: status },
                headers: {
                    'RequestVerificationToken': token
                },
                success: function (response) {
                    if (response.success) {
                        loadFilteredOrders(); // reload filtered orders
                    } else {
                        alert('Failed to update status: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Failed to update status: ' + error);
                }
            });
        }

        function loadFilteredOrders() {
            var selectedStatuses = $(".status-filter:checked").map(function () {
                return $(this).val();
            }).get();

            $.ajax({
                url: '@Url.Action("GetFilteredOrders", "OrderManagement", new { area = "Supplier" })',
                type: 'GET',
                traditional: true, // Ensures array is serialized correctly
                data: { statuses: selectedStatuses },
                success: function (orders) {
                    let html = '';
                    if (orders.length === 0) {
                        html = '<tr><td colspan="6" class="text-center text-muted">No orders found.</td></tr>';
                    } else {
                        for (const o of orders) {
                            html += `
        <tr>
            <td>${o.orderNumber}</td>
            <td>${o.dropShipperCompanyName ?? ''}</td>
            <td>${new Date(o.orderDate).toLocaleDateString()}</td>
            <td>${o.totalAmount}</td>
            <td><span class="badge ${getStatusBadgeClass(o.status)}">${o.status}</span></td>
            <td class="text-center" style="min-width: 180px;">
                <div class="btn-group dropend">
                    <a href="/Supplier/OrderManagement/Details/${o.id}" class="btn btn-sm btn-info">
                        <i class="bi bi-eye"></i> View
                    </a>
                    <button type="button" class="btn btn-sm btn-info dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                        <span class="visually-hidden">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="updateStatus(${o.id}, 'Pending')">Pending</a></li>
                        <li><a class="dropdown-item" href="#" onclick="updateStatus(${o.id}, 'Processing')">Processing</a></li>
                        <li><a class="dropdown-item" href="#" onclick="updateStatus(${o.id}, 'Shipped')">Shipped</a></li>
                        <li><a class="dropdown-item" href="#" onclick="updateStatus(${o.id}, 'Delivered')">Delivered</a></li>
                        <li><a class="dropdown-item" href="#" onclick="updateStatus(${o.id}, 'Return')">Return</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="#" onclick="updateStatus(${o.id}, 'Cancelled')">Cancelled</a></li>
                    </ul>
                </div>
            </td>
        </tr>`;
                        }
                    }
                    $('#ordersTableBody').html(html);
                },
                error: function (xhr, status, error) {
                    alert("Error loading orders: " + error);
                }
            });
        }

        function getStatusBadgeClass(status) {
            switch (status) {
                case 'Pending': return 'bg-warning text-dark';
                case 'Processing': return 'bg-info text-white';
                case 'Shipped': return 'bg-success text-white';
                case 'Delivered': return 'bg-primary text-white';
                case 'Return': return 'bg-secondary';
                case 'Cancelled': return 'bg-danger text-white';
                default: return 'bg-secondary';
            }
        }

        $(document).ready(function () {
            $(".status-filter").change(function () {
                loadFilteredOrders();
            });
        });
    </script>
}

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Processing" => "bg-info text-white",
            "Shipped" => "bg-success text-white",
            "Delivered" => "bg-primary text-white",
            "Return" => "bg-secondary",
            "Cancelled" => "bg-danger text-white",
            _ => "bg-secondary"
        };
    }
}
